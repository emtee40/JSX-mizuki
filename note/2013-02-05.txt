uname --kernel-name --kernel-release --hardware-platform
Darwin 12.2.0 MacBookAir4,2
jsx --version
0.9.4 (2013-02-05 11:48:53 +0900; 4ce67fc7e9d64708699754f8e3f5b883797c925c)
node --version
v0.8.18
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/sort.jsx
node a.jsx.js
Sorting 1000000 of floating point numbers
  shuffled 100% of the array
    builtin sort:    559[ms]
    StableSort! :    723[ms] ( 77%)
    StableSort  :   1097[ms] ( 51%)
  shuffled 50% of the array
    builtin sort:   1017[ms]
    StableSort! :    563[ms] (180%)
    StableSort  :    621[ms] (163%)
  shuffled 25% of the array
    builtin sort:    941[ms]
    StableSort! :    277[ms] (339%)
    StableSort  :    337[ms] (278%)
  shuffled 12.5% of the array
    builtin sort:   1169[ms]
    StableSort! :    203[ms] (574%)
    StableSort  :    211[ms] (551%)
js/jscore a.jsx.js
Sorting 1000000 of floating point numbers
  shuffled 100% of the array
    builtin sort:    229[ms]
    StableSort! :    541[ms] ( 42%)
    StableSort  :    689[ms] ( 33%)
  shuffled 50% of the array
    builtin sort:    125[ms]
    StableSort! :    318[ms] ( 39%)
    StableSort  :    361[ms] ( 34%)
  shuffled 25% of the array
    builtin sort:     75[ms]
    StableSort! :    161[ms] ( 46%)
    StableSort  :    193[ms] ( 38%)
  shuffled 12.5% of the array
    builtin sort:     51[ms]
    StableSort! :     86[ms] ( 59%)
    StableSort  :    123[ms] ( 41%)
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/mt-vs-builtin.jsx
node a.jsx.js
generate 10000000 of random numbers
  Math.random()   :    145[ms]
  (value : 4998879.219782546)
  MT#nextReal32() :   1964[ms] (7.3%)
  (value : 4999788.070460474)
  MT#nextReal()   :   3515[ms] (4.1%)
  (value : 4999924.80383602)
js/jscore a.jsx.js
generate 10000000 of random numbers
  Math.random()   :    172[ms]
  (value : 4998947.2650686465)
  MT#nextReal32() :   1265[ms] ( 13%)
  (value : 4999788.070460474)
  MT#nextReal()   :   2260[ms] (7.6%)
  (value : 4999924.80383602)
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/visual-width.jsx
node a.jsx.js
Benchmark for StringUtil.visualWidth()
  visualWidth for Hello, world! Wonrderful!: 0.9699[ms]
  (visual width: 2500; length: 2500)
  visualWidth for  [  ✽こんにちは世界✽  ]: 0.4082[ms] (237%)
  (visual width: 2500; length: 1600)
  visualWidth for Здравствуйте!: 0.3854[ms] (251%)
  (visual width: 2500; length: 1300)
js/jscore a.jsx.js
Benchmark for StringUtil.visualWidth()
  visualWidth for Hello, world! Wonrderful!: 0.8218[ms]
  (visual width: 2500; length: 2500)
  visualWidth for  [  ✽こんにちは世界✽  ]: 0.3524[ms] (233%)
  (visual width: 2500; length: 1600)
  visualWidth for Здравствуйте!: 0.3791[ms] (216%)
  (visual width: 2500; length: 1300)
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/base64.jsx
node a.jsx.js
Benchmark for Base64.encode()
  for text length=560: 0.1046[ms]
  result length=1148
Benchmark for Base64.decode()
  for encoded length=1148: 0.1156[ms]
  result length=560
js/jscore a.jsx.js
Benchmark for Base64.encode()
  for text length=560: 0.1923[ms]
  result length=1148
Benchmark for Base64.decode()
  for encoded length=1148: 0.2402[ms]
  result length=560
