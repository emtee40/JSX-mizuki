uname --kernel-name --kernel-release --hardware-platform
Darwin 12.2.0 MacBookAir4,2
jsx --version
0.9
node --version
v0.8.18
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/sort.jsx
node a.jsx.js
Sorting 1000000 of floating point numbers
  shuffled 100% of the array
    builtin sort:    546[ms]
    StableSort! :    717[ms] ( 76%)
    StableSort  :   1106[ms] ( 49%)
  shuffled 50% of the array
    builtin sort:   1036[ms]
    StableSort! :    595[ms] (174%)
    StableSort  :    606[ms] (170%)
  shuffled 25% of the array
    builtin sort:    995[ms]
    StableSort! :    347[ms] (286%)
    StableSort  :    335[ms] (296%)
  shuffled 12.5% of the array
    builtin sort:    961[ms]
    StableSort! :    211[ms] (455%)
    StableSort  :    213[ms] (450%)
js/jscore a.jsx.js
Sorting 1000000 of floating point numbers
  shuffled 100% of the array
    builtin sort:    234[ms]
    StableSort! :    552[ms] ( 42%)
    StableSort  :    692[ms] ( 33%)
  shuffled 50% of the array
    builtin sort:    135[ms]
    StableSort! :    358[ms] ( 37%)
    StableSort  :    368[ms] ( 36%)
  shuffled 25% of the array
    builtin sort:     79[ms]
    StableSort! :    171[ms] ( 45%)
    StableSort  :    226[ms] ( 34%)
  shuffled 12.5% of the array
    builtin sort:     52[ms]
    StableSort! :     88[ms] ( 59%)
    StableSort  :    124[ms] ( 42%)
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/mt-vs-builtin.jsx
node a.jsx.js
generate 10000000 of random numbers
  Math.random()   :    150[ms]
  (value : 4998054.486738322)
  MT#nextReal32() :   2119[ms] (7.1%)
  (value : 4999788.070460474)
  MT#nextReal()   :   3484[ms] (4.3%)
  (value : 4999924.80383602)
js/jscore a.jsx.js
generate 10000000 of random numbers
  Math.random()   :    228[ms]
  (value : 4999905.8734554555)
  MT#nextReal32() :   1315[ms] ( 17%)
  (value : 4999788.070460474)
  MT#nextReal()   :   2353[ms] (9.7%)
  (value : 4999924.80383602)
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/visual-width.jsx
node a.jsx.js
Benchmark for StringUtil.visualWidth()
  visualWidth for Hello, world! Wonrderful!: 2.0962[ms]
  (visual width: 2500; length: 2500)
  visualWidth for  [  ✽こんにちは世界✽  ]: 0.7711[ms] (271%)
  (visual width: 2500; length: 1600)
  visualWidth for Здравствуйте!: 0.5375[ms] (389%)
  (visual width: 2500; length: 1300)
js/jscore a.jsx.js
Benchmark for StringUtil.visualWidth()
  visualWidth for Hello, world! Wonrderful!: 0.7201[ms]
  (visual width: 2500; length: 2500)
  visualWidth for  [  ✽こんにちは世界✽  ]: 0.3076[ms] (234%)
  (visual width: 2500; length: 1600)
  visualWidth for Здравствуйте!: 0.3616[ms] (199%)
  (visual width: 2500; length: 1300)
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/base64.jsx
node a.jsx.js
Benchmark for Base64.encode()
  for text length=560: 0.1037[ms]
  result length=1148
Benchmark for Base64.decode()
  for encoded length=1148: 0.1161[ms]
  result length=560
js/jscore a.jsx.js
Benchmark for Base64.encode()
  for text length=560: 0.1930[ms]
  result length=1148
Benchmark for Base64.decode()
  for encoded length=1148: 0.2963[ms]
  result length=560
