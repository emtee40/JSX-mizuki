uname --kernel-name --kernel-release --hardware-platform
Darwin 12.3.0 MacBookAir4,2
jsx --version
0.9.26 (2013-04-19 10:46:44 +0900; 29fff0d44ffc20b11d5e6ebebf4239a5c30b097d)
node --version
v0.10.4
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/sort.jsx
node a.jsx.js
Sorting 1000000 of floating point numbers
  shuffled 100% of the array
    builtin sort:    886[ms]
    StableSort! :    768[ms] (115%)
    StableSort  :   1663[ms] ( 53%)
  shuffled 50% of the array
    builtin sort:    683[ms]
    StableSort! :    595[ms] (114%)
    StableSort  :    661[ms] (103%)
  shuffled 25% of the array
    builtin sort:    584[ms]
    StableSort! :    307[ms] (189%)
    StableSort  :    370[ms] (157%)
  shuffled 12.5% of the array
    builtin sort:    554[ms]
    StableSort! :    131[ms] (420%)
    StableSort  :    185[ms] (299%)
js/jscore a.jsx.js
Sorting 1000000 of floating point numbers
  shuffled 100% of the array
    builtin sort:    242[ms]
    StableSort! :    505[ms] ( 48%)
    StableSort  :    708[ms] ( 34%)
  shuffled 50% of the array
    builtin sort:    130[ms]
    StableSort! :    327[ms] ( 39%)
    StableSort  :    368[ms] ( 35%)
  shuffled 25% of the array
    builtin sort:     78[ms]
    StableSort! :    165[ms] ( 47%)
    StableSort  :    199[ms] ( 39%)
  shuffled 12.5% of the array
    builtin sort:     53[ms]
    StableSort! :     89[ms] ( 59%)
    StableSort  :    123[ms] ( 43%)
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/mt-vs-builtin.jsx
node a.jsx.js
generate 10000000 of random numbers
  Math.random()   :    161[ms]
  (value : 4998734.641213495)
  MT#nextReal32() :    686[ms] ( 23%)
  (value : 5001031.295583423)
  MT#nextReal()   :   1131[ms] ( 14%)
  (value : 4999924.80383602)
js/jscore a.jsx.js
generate 10000000 of random numbers
  Math.random()   :    165[ms]
  (value : 5001383.091918325)
  MT#nextReal32() :   1293[ms] ( 12%)
  (value : 4999788.070460474)
  MT#nextReal()   :   2374[ms] (6.9%)
  (value : 4999924.80383602)
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/visual-width.jsx
node a.jsx.js
Benchmark for StringUtil.visualWidth()
  visualWidth for Hello, world! Wonrderful!: 0.9910[ms]
  (visual width: 2500; length: 2500)
  visualWidth for  [  ✽こんにちは世界✽  ]: 0.3969[ms] (249%)
  (visual width: 2500; length: 1600)
  visualWidth for Здравствуйте!: 0.3908[ms] (253%)
  (visual width: 2500; length: 1300)
js/jscore a.jsx.js
Benchmark for StringUtil.visualWidth()
  visualWidth for Hello, world! Wonrderful!: 0.8850[ms]
  (visual width: 2500; length: 2500)
  visualWidth for  [  ✽こんにちは世界✽  ]: 0.4136[ms] (213%)
  (visual width: 2500; length: 1600)
  visualWidth for Здравствуйте!: 0.3996[ms] (221%)
  (visual width: 2500; length: 1300)
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/base64.jsx
node a.jsx.js
Benchmark for Base64.encode()
  for text length=560: 0.1000[ms]
  result length=1148
Benchmark for Base64.decode()
  for encoded length=1148: 0.1243[ms]
  result length=560
js/jscore a.jsx.js
Benchmark for Base64.encode()
  for text length=560: 0.2074[ms]
  result length=1148
Benchmark for Base64.decode()
  for encoded length=1148: 0.2627[ms]
  result length=560
