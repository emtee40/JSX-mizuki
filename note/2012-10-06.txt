uname --kernel-name --kernel-release --hardware-platform
Darwin 12.2.0 MacBookAir4,2
jsx --version
0.0.2
node --version
v0.8.11
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/sort.jsx
node a.jsx.js
Sorting 1000000 of floating point numbers
  shuffled 100% of the array
    builtin sort:    540[ms]
    StableSort! :    759[ms] ( 71%)
    StableSort  :   1091[ms] ( 49%)
  shuffled 50% of the array
    builtin sort:   1078[ms]
    StableSort! :    621[ms] (173%)
    StableSort  :    718[ms] (150%)
  shuffled 25% of the array
    builtin sort:   1037[ms]
    StableSort! :    320[ms] (323%)
    StableSort  :    340[ms] (304%)
  shuffled 12.5% of the array
    builtin sort:    967[ms]
    StableSort! :    200[ms] (483%)
    StableSort  :    214[ms] (451%)
js/spidermonkey a.jsx.js
Sorting 1000000 of floating point numbers
  shuffled 100% of the array
    builtin sort:   1084[ms]
    StableSort! :   1707[ms] ( 63%)
    StableSort  :   1641[ms] ( 66%)
  shuffled 50% of the array
    builtin sort:    546[ms]
    StableSort! :    827[ms] ( 66%)
    StableSort  :    807[ms] ( 67%)
  shuffled 25% of the array
    builtin sort:    308[ms]
    StableSort! :    404[ms] ( 76%)
    StableSort  :    422[ms] ( 73%)
  shuffled 12.5% of the array
    builtin sort:    230[ms]
    StableSort! :    298[ms] ( 76%)
    StableSort  :    253[ms] ( 90%)
js/jscore a.jsx.js
Sorting 1000000 of floating point numbers
  shuffled 100% of the array
    builtin sort:    250[ms]
    StableSort! :    521[ms] ( 48%)
    StableSort  :    734[ms] ( 34%)
  shuffled 50% of the array
    builtin sort:    126[ms]
    StableSort! :    334[ms] ( 37%)
    StableSort  :    377[ms] ( 33%)
  shuffled 25% of the array
    builtin sort:     77[ms]
    StableSort! :    173[ms] ( 44%)
    StableSort  :    200[ms] ( 38%)
  shuffled 12.5% of the array
    builtin sort:     54[ms]
    StableSort! :     95[ms] ( 57%)
    StableSort  :    129[ms] ( 42%)
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/mt-vs-builtin.jsx
node a.jsx.js
generate 10000000 of random numbers
  Math.random()   :    143[ms]
  (value : 5000491.74363825)
  MT#nextReal32() :   1859[ms] (7.7%)
  (value : 4999788.070460474)
  MT#nextReal()   :   3630[ms] (3.9%)
  (value : 4999924.80383602)
js/spidermonkey a.jsx.js
generate 10000000 of random numbers
  Math.random()   :    303[ms]
  (value : 4999058.693020664)
  MT#nextReal32() :   2469[ms] ( 12%)
  (value : 4999788.070460474)
  MT#nextReal()   :   6348[ms] (4.7%)
  (value : 4999924.80383602)
js/jscore a.jsx.js
generate 10000000 of random numbers
  Math.random()   :    240[ms]
  (value : 5001483.45257162)
  MT#nextReal32() :   1842[ms] ( 13%)
  (value : 4999788.070460474)
  MT#nextReal()   :   3376[ms] (7.1%)
  (value : 4999924.80383602)
jsx --release --add-search-path lib --output a.jsx.js --executable node benchmark/visual-width.jsx
node a.jsx.js
Benchmark for StringUtil.visualWidth()
  visualWidth for Hello, world! Wonrderful!: 2.3140[ms]
  (visual width: 2500; length: 2500)
  visualWidth for  [  ✽こんにちは世界✽  ]: 0.8913[ms] (259%)
  (visual width: 2500; length: 1600)
  visualWidth for Здравствуйте!: 0.7280[ms] (317%)
  (visual width: 2500; length: 1300)
js/spidermonkey a.jsx.js
Benchmark for StringUtil.visualWidth()
  visualWidth for Hello, world! Wonrderful!: 3.9179[ms]
  (visual width: 2500; length: 2500)
  visualWidth for  [  ✽こんにちは世界✽  ]: 3.8798[ms] (100%)
  (visual width: 3800; length: 3400)
  visualWidth for Здравствуйте!: 1.6897[ms] (231%)
  (visual width: 3700; length: 2500)
js/jscore a.jsx.js
Benchmark for StringUtil.visualWidth()
  visualWidth for Hello, world! Wonrderful!: 0.7815[ms]
  (visual width: 2500; length: 2500)
  visualWidth for  [  ✽こんにちは世界✽  ]: 0.3402[ms] (229%)
  (visual width: 2500; length: 1600)
  visualWidth for Здравствуйте!: 0.3407[ms] (229%)
  (visual width: 2500; length: 1300)
